#!/bin/bash

############################################ BASICS
SCRIPT_DIR="$COMPOSER_RUNTIME_BIN_DIR"
WORKING_DIR=$(pwd)
source $SCRIPT_DIR/sake-self-methods
# : ${ecsConfig:=$SCRIPT_DIR/../sunnysideup/easy-coding-standards/ecs.yml}

############################################ DIR
dir='./'

############################################ SETTINGS
numberOfCommits=0
message=""
doToday="no"
help='no'
allCommits='no'
allCommitsInBranch='no'
while (($#)); do
    case $1 in
    -n | --number-of-commits)
        numberOfCommits=$2
        shift
        ;;
    -m | --message)
        message=$2
        shift
        ;;
    -t | --today)
        doToday='yes'
        shift
        ;;
    -b | --branch--merge-all-commits)
        if [ "$2" = "yes" ]; then
            allCommitsInBranch="yes"
        fi
        shift
        ;;
    -z | --ze-entire-project)
        if [ "$2" = "yes" ]; then
            allCommits="yes"
        fi
        shift
        ;;
    -h | --help)
        help='yes'
        shift
        ;;
    -*)
        printf 'Unknown option: %q\n\n' "$1"
        help='yes'
        ;;
    *) dir=$1 ;;
    esac
    shift
done

if [[ "$message" == "" ]]; then
    read -p "Commit message: " message
fi
if [[ "$message" == "" ]]; then
    message={git log -1 --pretty=%B}
fi

help_and_exit() {
    ECHOHEAD "Merge previous commits"
    echonice "Directory of script:                 $SCRIPT_DIR"

    ECHOHEAD "Current settings:"
    echonice "Directory to analyse:                $WORKING_DIR/$dir"
    echonice "Number of commits to merge:          $numberOfCommits"
    echonice "Message (-m):                        $message"
    echonice "Do today (-t):                       $doToday"
    echonice "Do all commits (-z):                 $allCommitsInBranch"
    echonice "Do all commits (-z):                 $allCommits"

    ECHOHEAD "Available settings:"
    echonice "-n, --number-of-commits              number of commits to merge, default: 0"
    echonice "-m, --message                        message for new commit, default: WIP"
    echonice "-t, --today                          squash commits today, default: no"
    echonice "-b, --branch--merge-all-commits      merge all commits for current branch, MUST BE SET TO yes, default: no"
    echonice "-z, --ze-entire-project              merge all commits, MUST BE SET TO yes, default: no"
    echonice "-h, --help                           show help information"

    ECHOHEAD "Example usage:"
    echonice "sake-git-squash-commits ./ -t 'yes' -m 'MAJOR: overhaul of everything'"
    echonice "sake-git-squash-commits ./ -z 'yes' -m 'MERGE ALL COMMITS'"
    echonice "sake-git-squash-commits ./ -b 'yes' -m 'MINOR: my new feature description'"

    echofunctions
    exit
}

############################################ HELP ONLY
if [[ "$help" == "yes" ]]; then
    help_and_exit
fi

# Get the current Git branch
currentBranch=$(git branch --show-current)

# Check if a branch is found
if [ -z "$currentBranch" ]; then
    currentBranch=$(git symbolic-ref --short HEAD)
    if [ -z "$currentBranch" ]; then
        echo "No current branch found."
        exit 1
    fi
fi

ECHOHEAD "Current branch: $currentBranch"

git checkout $currentBranch
git pull origin $currentBranch

############################################ ALL
if [[ "$allCommits" == "yes" ]]; then

    # Confirm with the user
    read -p "Do you want to squash all commits on this project? (yes/no): " confirmation

    if [ "$confirmation" = "yes" ]; then

        # Switch back to the main branch
        git checkout $currentBranch

        # Reset to the initial commit
        git reset $(git rev-list --max-parents=0 HEAD)

        # Recommit everything as a single commit
        git add .
        git commit -m "$message"
        read -p "Do you want to force push the changes to the remote? (yes/no): " pushConfirmation
        if [ "$pushConfirmation" = "yes" ]; then
            git push origin $currentBranch --force

            echonice "All commits in $currentBranch have been squashed into one. Temporary branch deleted."

            # Fetch all the tags from the remote repository
            git fetch --tags

            # Store a list of all tags
            tags=$(git tag -l)

            # Check if there are local tags and delete them
            if [ -n "$tags" ]; then
                echonice "$tags" | xargs git tag -d
                echonice "Local tags deleted."
            else
                echonice "No local tags to delete."
            fi

            # Check if there are remote tags and delete them
            if [ -n "$tags" ]; then
                echonice "$tags" | xargs -n 1 git push --delete origin
                echonice "Remote tags deleted."
            else
                echonice "No remote tags to delete."
            fi
        else
            ECHOHEAD "Force push cancelled."
            echoend
            exit 0
        fi
        # If you've pushed to a remote before and want to force push, uncomment the line below:

        ECHOHEAD "All local and remote tags have been deleted."
        echoend
        exit
    else
        ECHOHEAD "Operation cancelled."
        echoend
        exit 0
    fi

fi

############################################ ALL
if [[ "$allCommitsInBranch" == "yes" ]]; then

    # Find the branch it was branched from (common ancestor)
    baseBranch=$(git merge-base --fork-point origin/main "$currentBranch" 2>/dev/null || echo "origin/main")

    # Confirm with the user
    read -p "Do you want to squash all unique commits on '$currentBranch' ahead of $baseBranch into a single commit? (yes/no): " confirmation

    if [ "$confirmation" = "yes" ]; then
        echonice "Squashing commits..."
        git reset --soft "$baseBranch"
        git commit -m "$message"

        # Confirm to push
        read -p "Do you want to force push the changes to the remote? (yes/no): " pushConfirmation
        if [ "$pushConfirmation" = "yes" ]; then
            git push origin "$currentBranch" --force
            ECHOHEAD "Changes have been force pushed. Kia kaha!"
        else
            ECHOHEAD "Force push cancelled."
            echoend
            exit 0
        fi
    else
        ECHOHEAD "Operation cancelled."
        echoend
        exit 0
    fi

    echoend
    exit
fi

############################################ CODE

if [ -d "$WORKING_DIR/$dir" ]; then
    cd $WORKING_DIR/$dir
else
    echonice "Could not change directory to $WORKING_DIR/$dir"
    help_and_exit
fi

todaysCount=$(git log --since="4am" --oneline | wc -l)

ECHOHEAD "List of commits for today"
git log --since="4am" --oneline

ECHOHEAD "Number of commits today:"
git shortlog -s -n --all --no-merges --since="4am"

if [[ "$doToday" == "yes" ]]; then
    numberOfCommits=$todaysCount
fi

if [ $numberOfCommits \> 0 ]; then
    git reset --soft HEAD~$numberOfCommits
    git commit . -m "$message"
    git add . -A
    git push --force-with-lease
else
    ECHOHEAD "Nothing to squash, please use -t or -n option"
fi

echoend
