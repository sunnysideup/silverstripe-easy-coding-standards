#!/bin/bash

############################################ BASICS
SCRIPT_DIR="$COMPOSER_RUNTIME_BIN_DIR"
WORKING_DIR=$(pwd)
source $SCRIPT_DIR/sake-self-methods
# : ${ecsConfig:=$SCRIPT_DIR/../sunnysideup/easy-coding-standards/ecs.yml}

############################################ DIR
dir='./'

############################################ SETTINGS
numberOfCommits=0
message=""
doToday="no"
help='no'
allCommits='no'
while (($#)); do
    case $1 in
    -n | --number-of-commits)
        numberOfCommits=$2
        shift
        ;;
    -m | --message)
        message=$2
        shift
        ;;
    -t | --today)
        doToday='yes'
        shift
        ;;
    -z | --all)
        allCommits='yes'
        shift
        ;;
    -h | --help)
        help='yes'
        shift
        ;;
    -*)
        printf 'Unknown option: %q\n\n' "$1"
        help='yes'
        ;;
    *) dir=$1 ;;
    esac
    shift
done

if [[ "$message" == "" ]]; then
    read -p "Commit message: " message
fi
if [[ "$message" == "" ]]; then
    message={git log -1 --pretty=%B}
fi

help_and_exit() {
    echohead "Merge previous commits"
    echonice "Directory of script:                 $SCRIPT_DIR"

    echohead "Current settings:"
    echonice "Directory to analyse:                $WORKING_DIR/$dir"
    echonice "Number of commits to merge:          $numberOfCommits"
    echonice "Message (-m):                        $message"
    echonice "Do Today (-t):                       $doToday"

    echohead "Available settings:"
    echonice "-t, --today                          message for new commit, default: WIP"
    echonice "-n, --number-of-commits              number of commits to merge, default: 0"
    echonice "-m, --message                        message for new commit, default: WIP"
    echonice "-z, --all                            merge all commits"
    echonice "-h, --help                           show help information"

    echohead "Example usage:"
    echonice "sake-git-squash-commits ./ -t 'yes' -m 'MAJOR: overhaul of everything'"

    echofunctions
    exit
}

############################################ HELP ONLY
if [[ "$help" == "yes" ]]; then
    help_and_exit
fi

############################################ ALL
if [[ "$allCommits" == "yes" ]]; then

    # Get the name of the current branch
    current_branch=$(git symbolic-ref --short HEAD)

    # Create a new branch for safety
    git checkout -b new_branch

    # Reset to the initial commit
    git reset $(git rev-list --max-parents=0 HEAD)

    # Recommit everything as a single commit
    git add .
    git commit -m "$message"

    # Switch back to the original branch and merge changes
    git checkout $current_branch
    git merge new_branch

    # Delete the temporary branch
    git branch -D new_branch

    # If you've pushed to a remote before and want to force push, uncomment the line below:
    git push origin $current_branch --force

    echonice "All commits in $current_branch have been squashed into one. Temporary branch deleted."
    echoend
    exit
fi

############################################ CODE

if [ -d "$WORKING_DIR/$dir" ]; then
    cd $WORKING_DIR/$dir
else
    echonice "Could not change directory to $WORKING_DIR/$dir"
    help_and_exit
fi

todaysCount=$(git log --since="4am" --oneline | wc -l)

echohead "List of commits for today"
git log --since="4am" --oneline

echohead "Number of commits today:"
git shortlog -s -n --all --no-merges --since="4am"

if [[ "$doToday" == "yes" ]]; then
    numberOfCommits=$todaysCount
fi

if [ $numberOfCommits \> 0 ]; then
    git reset --soft HEAD~$numberOfCommits
    git commit . -m "$message"
    git add . -A
    git push --force-with-lease
else
    echohead "Nothing to squash, please use -t or -n option"
fi

echoend
