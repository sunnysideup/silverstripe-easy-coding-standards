#!/bin/bash

############################################ BASICS
SCRIPT_DIR="$COMPOSER_RUNTIME_BIN_DIR"
WORKING_DIR=$(pwd)
source $SCRIPT_DIR/sake-self-methods

############################################ DIR
dir='./'

############################################ SETTINGS
commitAndPush="yes"
message=""
newVersion='yes'
review='yes'
also='nothing-here-hopefully'
alsoDoThemes='no'
statusOnly='no'
help='no'
while (($#)); do
    case $1 in
    -c | --commit-and-push)
        commitAndPush=$2
        shift
        ;;
    -m | --message)
        message=$2
        shift
        ;;
    -v | --new-version)
        newVersion=$2
        shift
        ;;
    -r | --review)
        review=$2
        shift
        ;;
    -a | --also)
        also=$2
        shift
        ;;
    -s | --status-only)
        statusOnly=$2
        shift
        ;;
    -t | --themes-also)
        alsoDoThemes=$2
        shift
        ;;
    -h | --help)
        help='yes'
        shift
        ;;
    -*)
        printf 'Unknown option: %q\n\n' "$1"
        help='yes'
        ;;
    *) dir=$1 ;;
    esac
    shift
done

message=$(check_commit_message "$message")

retVal=$?

if [[ $retVal -ne 0 ]]; then
    echobad "Invalid commit message. Exiting script."
    exit 1
fi

help_and_exit() {
    ECHOHEAD "Git commit and push"
    echonice "directory of script:           $SCRIPT_DIR"
    echonice "directory to commit:           $dir (relative to $WORKING_DIR)"

    ECHOHEAD "Current settings:"
    echonice "Commit and Push (-c):          $commitAndPush"
    echonice "Message (-m):                  $message"
    echonice "New Version (-v):              $newVersion"
    echonice "Also check (-a):               $also (relative to $WORKING_DIR)"
    echonice "Status Only (-s):              $statusOnly"
    echonice "Review First (-r):             $review"
    echonice "Also include themes (-t):      $alsoDoThemes"

    ECHOHEAD "Available settings:"
    echonice "-c, --commit-and-push          commit and push also? default: yes !!!"
    echonice "-m, --message                  commit message, defaults to last message used"
    echonice "-v, --new-version              create new tag (no|patch|minor|major), default: yes"
    echonice "-a, --also                     also do vendor - e.g. vendor/silverstripe OR vendor/sunnysideup"
    echonice "-t, --themes-also              include folders in themes, default: no"
    echonice "-s, --status-only              status only, default: no !!!"
    echonice "-r, --review                   review first, default: yes"
    echonice "-h, --help                     show help information"

    ECHOHEAD "Example usage:"
    echonice "e.g. sake-git-commit-and-push  -m 'FIX: something' -v patch -a 'vendor/silverstripe'   -t yes  app/src "

    echofunctions
    exit
}

############################################ HELP ONLY
if [[ "$help" == "yes" ]]; then
    help_and_exit
fi

############################################ CODE

if [ -d "$WORKING_DIR/$dir" ]; then
    cd $WORKING_DIR/$dir
else
    echonice "Could not change directory to $WORKING_DIR/$dir"
    help_and_exit
fi

GIT_DIR=$(git rev-parse --show-toplevel)

if test -f "$GIT_DIR/.git/config"; then
    # set the right way to look at branches
    git config push.default matching

    ECHOHEAD "# check git status"
    git status

    ECHOHEAD "# current commit"
    git rev-parse --short --verify HEAD

    git merge HEAD &>/dev/null
    result=$?
    if [ $result -ne 0 ]; then
        git commit
    fi

    # pull all branches
    if [[ "$statusOnly" == "yes" ]]; then
        git fetch --all
    else
        git pull --all
        # git pull origin $(git rev-parse --abbrev-ref HEAD) --ipv4
    fi

    echoline

    if [[ "$statusOnly" == "yes" ]]; then
        exit 0
    fi

    if [[ "$commitAndPush" == "yes" ]]; then

        ECHOHEAD "# adding files to git repo"
        git add . -A
        if [[ "$review" == "yes" ]]; then
            if command -v meld &>/dev/null; then
                # Get the count of changed lines and files
                output=$(git diff --cached --stat)
                lineCount=$(echo "$output" | awk '{added += $1; deleted += $3} END {print added + deleted}')
                fileCount=$(echo "$output" | grep -c '|')

                # Check conditions
                if [[ "$lineCount" -gt 3 || "$fileCount" -gt 1 ]]; then
                    echonice "Plenty of changes! ($lineCount lines changed across $fileCount files)"
                    # Add your action here, e.g., exit 1 or some other command
                    meld .
                else
                    echonice "Changes are within acceptable limits, no need for a review."
                fi
            else
                echobad "Meld is not installed."
            fi
        else
            echonice "Skipping review"
        fi
        #git add $WORKING_DIR/$also
        #git add $WORKING_DIR/$logFile

        ECHOHEAD "Commit message: $message"

        ECHOHEAD "# committing files to git repo"
        git commit . -m "$message"
        #git commit $WORKING_DIR/$also -m "$message"
        #git commit $WORKING_DIR/$logFile -m "$message"
    fi

    # ECHOHEAD "# pulling commits for the current branch from git repo"
    # git pull origin $(git rev-parse --abbrev-ref HEAD) --ipv4
    # git fetch --all --ipv4

    if [[ "$commitAndPush" == "yes" ]]; then
        BRANCH=$(git rev-parse --abbrev-ref HEAD)

        ECHOHEAD "# pushing commits to git repo, branch: $BRANCH"
        git push origin $(git rev-parse --abbrev-ref HEAD) --ipv4
    fi

    ECHOHEAD "# check git status"
    git status
    echoline

    if output=$(git status --porcelain) && [ -z "$output" ]; then
        echogood " # ALL COMMITTED"
    else
        echobad "Not all Code is Committed"
    fi
    if git diff-index --quiet HEAD --; then
        echogood " # ALL PUSHED"
    else
        echobad "There are changes to push"
    fi
    echoline

    if [[ "$newVersion" == "yes" ]]; then
        $SCRIPT_DIR/sake-git-tag $WORKING_DIR
    fi

    if test -f "$WORKING_DIR/$also"; then
        $SCRIPT_DIR/sake-git-commit-and-push-vendor-packages -m "'$message'" -t no -c $commitAndPush $WORKING_DIR/$also
    fi

    if [[ "$alsoDoThemes" == "yes" ]]; then
        $SCRIPT_DIR/sake-git-commit-and-push-vendor-packages -m "'$message'" -t no -c $commitAndPush $WORKING_DIR/themes
    fi
else
    echobad "$WORKING_DIR/$dir IS NOT A GIT REPO so I can not commit the changes."
fi

echoend
