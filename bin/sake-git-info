#!/bin/bash

############################################ BASICS
SCRIPT_DIR="$COMPOSER_RUNTIME_BIN_DIR"
WORKING_DIR=$(pwd)
source $SCRIPT_DIR/sake-self-methods

############################################ DIR
dir='./'

############################################ SETTINGS
help='no'
while (( $# )); do
  case $1 in
    -h|--help)             help='yes';shift ;;
    -*)                    printf 'Unknown option: %q\n\n' "$1";
                           help='yes' ;;
    *)                     dir=$1;;
  esac
  shift
done



help_and_exit() {
    echohead "Git info";
    echonice "directory of script:           $SCRIPT_DIR";
    echonice "directory to commit:           $WORKING_DIR/$dir";

    echohead "Available settings:";
    echonice "-h, --help                     show help information"

    echohead "Example usage:"
    echonice "e.g. sake-git-info ";

    echofunctions
    exit;
}



############################################ HELP ONLY
if [[ "$help" == "yes" ]]; then
    help_and_exit
fi

############################################ CODE

if [ -d "$WORKING_DIR/$dir" ]; then
    cd $WORKING_DIR/$dir
else
    echonice "Could not change directory to $WORKING_DIR/$dir";
    help_and_exit;
fi

git fetch --all



# Check if the develop branch exists
if [ "$(git branch | grep develop)" == "" ]
then
  # If it does not exist, create and push it
  echo "Creating and pushing develop branch..."
  git checkout -b develop master
  git push origin develop
fi

# Check if the production branch exists
if [ "$(git branch | grep production)" == "" ]
then
  # If it does not exist, create and push it
  echo "Creating and pushing production branch..."
  git checkout -b production develop
  git push origin production
fi


GIT_DIR=$(git rev-parse --show-toplevel)

if test -f "$GIT_DIR/.git/config"; then

    echohead "fetchin --all"
    git fetch --all

    # set the right way to look at testbranches
    git config push.default matching

    echohead "# check git status"
    git status

    echohead "# current commit"
    git rev-parse --short --verify HEAD

    echohead "# last three commits"
    git log -3

    echohead "# unpushed branches"
    git log --branches --not --remotes --no-walk --decorate --oneline


else
    echobad "$WORKING_DIR/$dir IS NOT A GIT REPO";
fi


# Get all remote branches
remote_branches=$(git branch -r)

printf "%-40s %-5s %s\n" "Branch Name" "Ahead" "Behind"

for branch in $remote_branches
do
  # Skip HEAD
  if [ $branch != "origin/HEAD" ]
  then
    # Check out the branch to compare
    git checkout -q $branch
    git pull origin $branch
    git push origin $branch

    # Get the number of commits the branch is ahead of develop
    ahead=$(git rev-list --count develop..$branch)

    # Get the number of commits the branch is behind develop
    behind=$(git rev-list --count $branch..develop)

    # Print formatted output
    printf "%-40s %-5s %s\n" $branch $ahead $behind
  fi
done


# Check if the develop branch exists
if [ "$(git branch | grep develop)" == "" ]
then
  # If it does not exist, create and push it
  echo "Creating and pushing develop branch..."
  git checkout -b develop master
  git push origin develop
fi

# Check if the production branch exists
if [ "$(git branch | grep production)" == "" ]
then
  # If it does not exist, create and push it
  echo "Creating and pushing production branch..."
  git checkout -b production develop
  git push origin production
fi

# Switch back to develop branch
git checkout develop


echoend;
