#!/bin/bash

############################################ BASICS
SCRIPT_DIR="$COMPOSER_RUNTIME_BIN_DIR"
WORKING_DIR=$(pwd)
source $SCRIPT_DIR/sake-self-methods

############################################ DIR
dir='./'

############################################ SETTINGS
help='no'
while (( $# )); do
  case $1 in
    -h|--help)             help='yes';shift ;;
    -*)                    printf 'Unknown option: %q\n\n' "$1";
                           help='yes' ;;
    *)                     dir=$1;;
  esac
  shift
done



help_and_exit() {
    echohead "Git info";
    echonice "directory of script:           $SCRIPT_DIR";
    echonice "directory to commit:           $WORKING_DIR/$dir";

    echohead "Available settings:";
    echonice "-h, --help                     show help information"

    echohead "Example usage:"
    echonice "e.g. sake-git-info ";

    echofunctions
    exit;
}



############################################ HELP ONLY
if [[ "$help" == "yes" ]]; then
    help_and_exit
fi

############################################ CODE

if [ -d "$WORKING_DIR/$dir" ]; then
    cd $WORKING_DIR/$dir
else
    echonice "Could not change directory to $WORKING_DIR/$dir";
    help_and_exit;
fi

GIT_DIR=$(git rev-parse --show-toplevel)

if test -f "$GIT_DIR/.git/config"; then

    echohead "fetchin --all"
    git fetch --all

    # set the right way to look at testbranches
    git config push.default matching

    echohead "# check git status"
    git status

    echohead "# current commit"
    git rev-parse --short --verify HEAD

    echohead "# last three commits"
    git log -3

    echohead "# unpushed branches"
    git log --branches --not --remotes --no-walk --decorate --oneline

    mybranch=$(git symbolic-ref -q HEAD)
    mybranch=${mybranch##refs/heads/}
    mybranch=${mybranch:-HEAD}

    echohead "# branches that are ahead"
    git for-each-ref refs/heads/ --format='%(refname:short)' |
    while read testbranch; do
        AHEAD=$(git rev-list --count $mybranch..$testbranch)
        if [ $AHEAD -gt 0 ]; then
            BEHIND=$(git rev-list --count $testbranch..$mybranch)
            echobad "$AHEAD $testbranch ($BEHIND behind $mybranch)"
        fi
    done

else
    echobad "$WORKING_DIR/$dir IS NOT A GIT REPO";
fi

echoend;
