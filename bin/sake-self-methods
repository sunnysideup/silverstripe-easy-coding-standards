#!/bin/bash

envFileLocation="$HOME/.config/composer/.env"

echoplain() {
    echo -e " $1" >&2
}

echonice() {
    echo -e " \033[0;33m$1 \033[0m" >&2
}

echogood() {
    echo -e " \033[0;32m$1 \033[0m" >&2
}

echobad() {
    echo -e "\033[1;32;44m ---------------------------------------- \033[0m" >&2
    echo -e " \033[1;32;44m ERROR: $1 \033[0m" >&2
    echo -e "\033[1;32;44m ---------------------------------------- \033[0m" >&2
}

echoline() {
    echonice '----------------------------------------'
}

ECHOHEAD() {
    string=$1

    if [[ $string != \#* ]]; then
        string="# $string"
    fi
    echo "" >&2
    echo "" >&2
    echo "" >&2
    echoline
    echo -e "\033[95m $string\033[0m" >&2
    echoline
}

echoend() {
    echo "" >&2
    echoline
    echogood "COMPLETED"
    echoline

    [ $(date +%1N) == 1 ] && $SCRIPT_DIR/sake-self-update
}

echofunctions() {
    if ((RANDOM % 3 == 0)); then
        ECHOHEAD 'Available Functions? Run ...'
        echogood "sake-help"
        echoline
    fi
}

echolistoffunctions() {
    ECHOHEAD 'List of Available Functions'
    for entry in $(ls $SCRIPT_DIR); do
        echonice " -  $entry"
    done
    echonice "To show the options for a specific command, run:"
    echo "[command] -h" >&2
    echonice "e.g. sake-lint-all -h"
}

addtoscrutinizer() {
    packageWithSilverstripe=$1
    # add to scrutinizer
    if [ -z "$SCRUTINIZER_API_TOKEN" ]; then
        echobad "Scrutinizer credentials (SCRUTINIZER_API_TOKEN) not set in $envFileLocation file."
        exit 1
    fi
    if [ -z "$packageWithSilverstripe" ]; then
        echobad "Package to be added (packageWithSilverstripe) not provided."
        exit 1
    fi
    # # Submit the GitHub repository to Scrutinizer
    # response=$(curl -X POST "https://scrutinizer-ci.com/api/repositories/g" \
    #     -H "Authorization: token $SCRUTINIZER_API_TOKEN" \
    #     -H "Content-Type: application/json" \
    #     -d "{\"name\":\"$packageWithSilverstripe\"}")
    # # Check response or log it
    # ECHOHEAD $response

    scrutinizerApiPath="https://scrutinizer-ci.com/api"
    endPoint="repositories/g?access_token=${SCRUTINIZER_API_TOKEN}"
    url="${scrutinizerApiPath}/${endPoint}"

    # Create the POST fields
    postFields="{\"name\": \"${packageWithSilverstripe}\"}"

    # Make the curl request
    curlResult=$(curl -L -s -o /dev/null -w "%{http_code}" -X POST -d "$postFields" -H "Content-Type: application/json" "$url")

    # Check the result
    if [ "$curlResult" != "200" ] && [ "$curlResult" != "201" ]; then
        echobad "Could not add ${packageWithSilverstripe} to Scrutinizer (HTTP code: $curlResult)"
        # Make the curl request and show all details
        curlResult=$(curl -L -X POST -d "$postFields" -H "Content-Type: application/json" "$url")

        # Output the result
        echobad "$curlResult"
        return
    else
        echonice "${packageWithSilverstripe} added to Scrutinizer successfully."
    fi
}

# Function to check if $package is installed
installpackage() {
    package=$1
    if ! command -v $package &>/dev/null; then
        echobad "$package is not installed. Installing now..."
        sudo apt-get update && sudo apt-get install $package
    else
        echonice "$package is installed."
    fi
}

# check if gh is authenticated
check_gh_auth() {
    if ! gh auth status &>/dev/null; then
        echobad "You are not logged in to GitHub CLI."
        echonice "Attempting to log in..."
        gh auth login
    else
        echonice "You are already logged in to GitHub CLI."
    fi
}

check_for_env_var() {
    envVarName=$1
    envVarValue="${!envVarName}"

    if [ -z "$envVarValue" ]; then
        echobad "Error: Environment variable $envVarName not set in $envFileLocation file."
        exit 1
    fi
}

# USE LIKE THIS: matchingDirs=$(get_my_repos "$WORKING_DIR")

get_my_repos() {
    check_for_env_var "GITHUB_MATCH_URL_FOR_VENDOR_PACKAGES"
    WORKING_DIR=$1
    # Paths to vendor directory and composer.lock
    vendorDir="$WORKING_DIR/vendor"
    composerLock="$WORKING_DIR/composer.lock"
    # Extract package names and source URLs from composer.lock
    packages=$(jq -r '.packages[] | "\(.name) \(.source.url)"' $composerLock)

    # Initialize an array for package directories
    declare -a packageDirs

    while read -r packageName packageUrl; do
        packageDir="$vendorDir/$packageName"
        if [ -d "$packageDir/.git" ]; then
            remoteUrl=$(git -C "$packageDir" config --get remote.origin.url)
            if [[ "$remoteUrl" == *"$GITHUB_MATCH_URL_FOR_VENDOR_PACKAGES"* ]]; then
                packageDirs+=("$packageDir")
                echo $packageDir
            fi
        fi
    done <<<"$packages"
    echonice "${packageDirs[@]}"
}

check_commit_message() {
    local message=$1

    if [[ -z "$message" ]]; then
        read -p "Commit message: " message
    fi

    if [[ -z "$message" ]]; then
        message=$(git log -1 --pretty=%B)
    fi

    if [[ -z "$message" ]]; then
        echobad "Please provide a commit message."
        echonice "Allowed prefixes are: ${PREFIXES[*]}"
        return 1
    fi

    # List of allowed prefixes
    PREFIXES=("API" "NEW" "ENH" "FIX" "DOC" "DEP" "TLN" "MNT" "Merge")

    # Extract the first line of the commit message
    firstLine=$(echo "$message" | head -n 1)

    # Check if the commit message starts with an allowed prefix
    for prefix in "${PREFIXES[@]}"; do
        if [[ "$firstLine" == "$prefix"* ]]; then
            echo "$message"
            return 0
        fi
    done

    echobad "Commit message ($message) does not start with an allowed prefix."
    echonice "Allowed prefixes are: ${PREFIXES[*]}"
    return 1
}

# get .env variables

# Check if .env file exists
if [ ! -f $envFileLocation ]; then
    echobad ".env file not found here: $envFileLocation"
    exit 1
fi

# Load the .env file
source $envFileLocation

echofunctions
