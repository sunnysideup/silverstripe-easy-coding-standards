#!/bin/bash

############################################ BASICS
SCRIPT_DIR="$COMPOSER_RUNTIME_BIN_DIR"
WORKING_DIR=$(pwd)
source $SCRIPT_DIR/sake-self-methods

############################################ DIR
dir='./'

############################################ SETTINGS
description=''
fullName=''
package=''
namespace=''
help='no'
while (($#)); do
    case $1 in
    -p | --package)
        package=$2
        shift
        ;;
    -n | --namespace)
        namespace=$2
        shift
        ;;
    -f | --fullName)
        fullName=$2
        shift
        ;;
    -d | --description)
        description=$2
        shift
        ;;
    -h | --help)
        help='yes'
        shift
        ;;
    -*)
        printf 'Unknown option: %q\n\n' "$1"
        help='yes'
        ;;
    *) dir=$1 ;;
    esac
    shift
done

[ -z "$package" ] && read -p "Enter package (e.g. sunnysideup/abc): " package || package=$package
[ -z "$namespace" ] && read -p "Enter namespace (e.g. Sunnysideup\\Abc): " namespace || namespace=$namespace
[ -z "$fullName" ] && read -p "Enter full name (e.g. My Abc Module): " fullName || fullName=$fullName
[ -z "$description" ] && read -p "Enter description (e.g. Does the ABC): " description || description=$description

package=$(echo $package | tr -d '|')
namespace=$(echo $namespace | tr -d '|')
fullName=$(echo $fullName | tr -d '|')
description=$(echo $description | tr -d '|')

# Remove the vendor part and store it as packageShortName
packageShortName=$(echo $package | sed 's/.*\///')

# Add "silverstripe-" after the "/" and store it as packageWithSilverstripe
packageWithSilverstripe=$(echo $package | sed 's/\//\/silverstripe-/')

help_and_exit() {
    echohead "Make a new module"
    echonice "Directory of script:             $SCRIPT_DIR"
    echonice "Directory to analyse:            $WORKING_DIR/$dir"

    echoline "Current settings:"
    echonice "--package (-p):                  $package"
    echonice "--namespace (-n):                $namespace"
    echonice "--fullName (-f):                 $fullName"
    echonice "--description (-d):              $description"
    echonice "package short name:              $packageShortName"
    echonice "package with silverstripe:       $packageWithSilverstripe"

    echohead "Example usage:"
    echonice "sake-ss-start-new-module ./  -p sunnysideup/new-module -n Sunnysideup\App -f 'Hello World' -d 'This is a new module'"

    echofunctions
    exit
}

############################################ HELP ONLY
if [[ "$help" == "yes" ]]; then
    help_and_exit
fi

############################################ CODE

if [ -d "$WORKING_DIR" ]; then
    cd $WORKING_DIR
else
    echonice "Could not change directory to $WORKING_DIR"
    help_and_exit
fi

check_gh_installed() {
    if ! command -v gh &>/dev/null; then
        echobad "GitHub CLI not installed. Installing now..."
        sudo apt-get update
        sudo apt-get install gh
    else
        echonice "GitHub CLI is installed."
    fi
}
check_gh_installed

check_gh_auth() {
    if ! gh auth status &>/dev/null; then
        echobad "You are not logged in to GitHub CLI."
        echonice "Attempting to log in..."
        gh auth login
    else
        echonice "You are already logged in to GitHub CLI."
    fi
}

# ... rest of your script ...

check_gh_auth

# Create a new repository on GitHub
gh repo create $packageShortName --public

# Clone the template repository into the new repository
git clone git@github.com:sunnysideup/$packageShortName $packageShortName
if [ -d "$packageShortName" ]; then
    cd $packageShortName
else
    echonice "Could not change directory to '$packageShortName'"
    help_and_exit
fi

# Clone the template repository into a temporary directory
tmpDir=$(mktemp -d) # Create a temporary directory
git clone git@github.com:sunnysideup/silverstripe-module.git "$tmpDir"

# Copy the contents to the new repository directory
rsync -av --exclude='.git' $tmpDir/* ./
rm -rf "$tmpDir" # Remove the temporary directory

# Replace instances of the template strings with the provided variables
find . -type f -exec sed -i "s|sunnysideup/silverstripe-skeleton|$packageWithSilverstripe|g" {} +
find . -type f -exec sed -i "s|sunnysideup/skeleton|$package|g" {} +
find . -type f -exec sed -i "s|Sunnysideup\\\\\\\\Skeleton|$namespace|g" {} +
find . -type f -exec sed -i "s|skeleton-description|$description|g" {} +
find . -type f -exec sed -i "s|skeleton|$packageShortName|g" {} +

# Move the configuration file
mv _config/skeleton.yml.example _config/$packageShortName.yml.example

# Move the sake scripts
mv bin/sake-npm-watch-skeleton.sh bin/sake-npm-watch-$packageShortName.sh
mv bin/sake-npm-build-skeleton.sh bin/sake-npm-build-$packageShortName.sh

# Add changes to git and push them
git add .
git commit -m "HELLO WORLD COMMIT"
git push origin main

# Fetch the URL of the remote Git repository
packageUrl=$(git config --get remote.origin.url)

# Check if the package URL was retrieved successfully
if [ -z "$packageUrl" ]; then
    echobad "Error: Could not retrieve package URL from Git repository."
    exit 1
fi

#
$envFileLocation = '~/.config/composer/.env'

# Check if .env file exists
if [ ! -f $envFileLocation ]; then
    echobad "Error: .env file not found."
    exit 1
fi

# Load the .env file
source $envFileLocation

# Check if credentials are set
if [ -z "$PACKAGIST_USERNAME" ] || [ -z "$PACKAGIST_API_TOKEN" ]; then
    echobad "Error: Packagist credentials (PACKAGIST_USERNAME, PACKAGIST_API_TOKEN) not set in $envDir file."
    exit 1
fi

# Submit or update the package on Packagist
response=$(curl -X POST "https://packagist.org/api/update-package?username=$PACKAGIST_USERNAME&apiToken=$PACKAGIST_API_TOKEN" -H "Content-Type: application/json" -d "{\"repository\":{\"url\":\"$packageUrl\"}}")

# Optional: Check response or log it
echo $response

# Navigate back to the original directory
cd -

echoend
