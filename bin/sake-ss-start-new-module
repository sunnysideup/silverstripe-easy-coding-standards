#!/bin/bash

############################################ BASICS
SCRIPT_DIR="$COMPOSER_RUNTIME_BIN_DIR"
WORKING_DIR=$(pwd)
source $SCRIPT_DIR/sake-self-methods

############################################ DIR
dir='./'

############################################ SETTINGS
packageName=''
namespace=''
fullName=''
description=''
keywords=''
help='no'
while (($#)); do
    case $1 in
    -p | --package)
        packageName=$2
        shift
        ;;
    -n | --namespace)
        namespace=$2
        shift
        ;;
    -f | --fullName)
        fullName=$2
        shift
        ;;
    -d | --description)
        description=$2
        shift
        ;;
    -k | --keywords)
        keywords=$2
        shift
        ;;
    -h | --help)
        help='yes'
        shift
        ;;
    -*)
        printf 'Unknown option: %q\n\n' "$1"
        help='yes'
        ;;
    *) dir=$1 ;;
    esac
    shift
done

[ -z "$packageName" ] && read -p "Enter package name (e.g. sunnysideup/abc): " packageName || packageName=$packageName
[ -z "$namespace" ] && read -r -p "Enter namespace (e.g. Sunnysideup\\Abc): " namespace || namespace=$namespace
[ -z "$fullName" ] && read -p "Enter full name (e.g. My Abc Module): " fullName || fullName=$fullName
[ -z "$description" ] && read -p "Enter description (e.g. Does the ABC): " description || description=$description
[ -z "$keywords" ] && read -p "Enter keywords, separated by a commna (e.g. foo, bar): " keywords || keywords=$keywords

packageName=$(echo $packageName | tr -d '|')
namespace=$(echo $namespace | tr -d '|')
fullName=$(echo $fullName | tr -d '|')
description=$(echo $description | tr -d '|')
keywords=$(echo $keywords | tr -d '|')

# Remove the vendor part and store it as packageShortName
packageShortName=$(echo $packageName | sed 's/.*\///')

# add silverstripe- to the packageShortName
packageShortNameWithSilverstripe="silverstripe-$packageShortName"

# Add "silverstripe-" after the "/" and store it as packageWithSilverstripe
packageWithSilverstripe=$(echo $packageName | sed 's/\//\/silverstripe-/')
escaped_namespace=$(echo "$namespace" | sed 's/\\/\\\\/g')
double_escaped_namespace=$(echo "$escaped_namespace" | sed 's/\\/\\\\/g')

help_and_exit() {
    ECHOHEAD "Make a new module"
    echonice "Directory of script:             $SCRIPT_DIR"
    echonice "Directory to analyse:            $WORKING_DIR/$dir"

    echoline "Current settings:"
    echonice "--package (-p):                  $packageName"
    echonice "--namespace (-n):                $namespace"
    echonice "--fullName (-f):                 $fullName"
    echonice "--description (-d):              $description"
    echonice "package short name:              $packageShortName"
    echonice "package short with silverstripe: $packageShortNameWithSilverstripe"
    echonice "package with silverstripe:       $packageWithSilverstripe"

    ECHOHEAD "Example usage:"
    echonice "sake-ss-start-new-module ./  -p sunnysideup/new-module -n Sunnysideup\App -f 'Hello World' -d 'This is a new module'"

    echofunctions
    exit
}

############################################ HELP ONLY
if [[ "$help" == "yes" ]]; then
    help_and_exit
fi

############################################ CODE

if [ -d "$WORKING_DIR" ]; then
    cd $WORKING_DIR
else
    echobad "Could not change directory to $WORKING_DIR"
    help_and_exit
fi

installpackage "gh"
installpackage "jq"
check_gh_auth
check_for_env_var "SCRUTINIZER_API_TOKEN"
check_for_env_var "PACKAGIST_USERNAME"
check_for_env_var "PACKAGIST_API_TOKEN"
echonice "package name:                    $packageName"
echonice "package short name:              $packageShortName"
echonice "package short with silverstripe: $packageShortNameWithSilverstripe"
echonice "package with silverstripe:       $packageWithSilverstripe"
help_and_exit
# Create a new repository on GitHub
gh repo create $packageShortNameWithSilverstripe --public

# Clone the template repository into the new repository
git clone git@github.com:sunnysideup/$packageShortNameWithSilverstripe $packageShortNameWithSilverstripe
if [ -d "$packageShortNameWithSilverstripe" ]; then
    cd $packageShortNameWithSilverstripe
else
    echonice "Could not change directory to '$packageShortNameWithSilverstripe'"
    help_and_exit
fi

# Clone the template repository into a temporary directory
tmpDir=$(mktemp -d) # Create a temporary directory
git clone git@github.com:sunnysideup/silverstripe-module.git "$tmpDir"

# Copy the contents to the new repository directory
rm -rf "$tmpDir/.git" # Remove the .git directory
rsync -av --exclude='.git' "${tmpDir}/" ./
rm -rf "$tmpDir" # Remove the temporary directory

# Replace instances of the template strings with the provided variables
find . -type f -exec sed -i "s|sunnysideup/silverstripe-foobar|$packageWithSilverstripe|g" {} +
find . -type f -exec sed -i "s|sunnysideup/foobar|$packageName|g" {} +
find . -type f -exec sed -i "s|Sunnysideup\\\\\\\\FooBar|$double_escaped_namespace|g" {} +
find . -type f -exec sed -i "s|Sunnysideup\\\\FooBar|$escaped_namespace|g" {} +
find . -type f -exec sed -i "s|foobar-fullname|$fullName|g" {} +
find . -type f -exec sed -i "s|foobar-description|$description|g" {} +
find . -type f -exec sed -i "s|silverstripe-foobar|$packageShortNameWithSilverstripe|g" {} +
find . -type f -exec sed -i "s|foobar|$packageShortName|g" {} +

# Move the configuration file
mv _config/foobar.yml.example _config/$packageShortName.yml.example

# Move the sake scripts
mv bin/sake-npm-watch-foobar.sh bin/sake-npm-watch-$packageShortName.sh
mv bin/sake-npm-build-foobar.sh bin/sake-npm-build-$packageShortName.sh

# Sample keywords string

# Convert string to an array, trimming whitespace
IFS=',' read -ra ADDR <<<"$keywords"
for i in "${!ADDR[@]}"; do
    ADDR[$i]=$(echo "${ADDR[$i]}" | xargs)
done

# Convert the array to a JSON array
json_array=$(jq -n --argjson arr "$(printf '%s\n' "${ADDR[@]}" | jq -Rc . | jq -s .)" '$arr')

# Update composer.json
jq --argjson arr "$json_array" '.keywords = $arr' composer.json >temp.json && mv temp.json composer.json

# Add changes to git and push them
git add .
git commit -m "MNT: first commit ... build from template - github.com/sunnysideup/silverstripe-module"
git push origin main

# Fetch the URL of the remote Git repository
packageUrl=$(git config --get remote.origin.url)

# Check if the package URL was retrieved successfully
if [ -z "$packageUrl" ]; then
    echobad "Error: Could not retrieve package URL from Git repository."
    exit 1
fi

# Submit or update the package on Packagist
response=$(curl -X POST "https://packagist.org/api/create-package?username=$PACKAGIST_USERNAME&apiToken=$PACKAGIST_API_TOKEN" -H "Content-Type: application/json" -d "{\"repository\":{\"url\":\"$packageUrl\"}}")

# Optional: Check response or log it
ECHOHEAD "PACKAGIST RESPONSE"
echonice "$response"

addtoscrutinizer $packageWithSilverstripe

# Navigate back to the original directory
cd -

echoend
