#!/bin/bash

############################################ BASICS
SCRIPT_DIR="$COMPOSER_RUNTIME_BIN_DIR"
WORKING_DIR=$(pwd)
source $SCRIPT_DIR/sake-self-methods

# : ${stanConfig:=$SCRIPT_DIR/../sunnysideup/easy-coding-standards/phpstan.neon}

############################################ DIR
dir="./"

############################################ SETTINGS
webpackDir='themes/sswebpack_engine_only/'
themeDir=''
help='no'
while (($#)); do
    case $1 in
    -w | --webpack-dir)
        webpackDir=$2
        shift
        ;;
    -t | --theme-dir)
        themeDir=$2
        shift
        ;;
    -h | --help)
        help='yes'
        shift
        ;;
    -*)
        printf 'Unknown option: %q\n\n' "$1"
        help='yes'
        ;;
    *) dir=$1 ;;
    esac
    shift
done

help_and_exit() {
    ECHOHEAD "NPM auditing script"
    echonice "Directory of script:          $SCRIPT_DIR"
    echonice "Directory to install:         $WORKING_DIR/$dir"

    ECHOHEAD "Current settings:"
    echonice "Webpack dir (-w):             $WORKING_DIR/$webpackDir"
    echonice "Theme dir (-t):               $WORKING_DIR/$themeDir"

    ECHOHEAD "Available settings:"
    echonice "-w, --webpack-dir             directory where webpack lives"
    echonice "-t, --theme-dir               add --theme-dir to npm command"
    echonice "-h, --help                    show help information"

    ECHOHEAD "Example usage:"
    echonice "sake-npm-audit -t themes/client"

    echofunctions
    exit
}

############################################ HELP ONLY
if [[ "$help" == "yes" ]]; then
    help_and_exit
fi

############################################ CODE


# Ensure jq is installed
if ! command -v jq &>/dev/null; then
    echobad "Error: jq is not installed. Please install jq to proceed."
    exit 1
fi


cd $WORKING_DIR
if [ "$themeDir" != "" ]; then
    cd $WORKING_DIR/$themeDir
fi

npm audit fix

set -euo pipefail

command -v npm >/dev/null || { echo "npm not found"; exit 1; }
command -v jq  >/dev/null || { echo "jq not found";  exit 1; }

# Cache the full tree once
LS_JSON="$(npm ls --all --json 2>/dev/null || echo '{}')"

# Find first installed version by traversing dependency KEYS recursively
get_installed_ver() {
  local name="$1"
  printf '%s\n' "$LS_JSON" | jq -r --arg n "$name" '
    def find($n):
      (.dependencies? // {} | to_entries[]) as $e
      | (select($e.key == $n) | $e.value.version),
        ($e.value | find($n));
    [ find($n) ][0] // "-"'
}

############################################
# Security vulnerabilities (fixable + non-fixable)
############################################
AUDIT_JSON="$(npm audit --json 2>/dev/null || true)"
if [[ -n "${AUDIT_JSON}" && "${AUDIT_JSON}" != "null" ]]; then
  echo "# Security Vulnerabilities"
  echo

  printf '%s\n' "${AUDIT_JSON}" | jq -c '
    .vulnerabilities
    | to_entries[]
    | {
        name: .key,
        range: .value.range,
        severity: .value.severity,
        fixKind: (if .value.fixAvailable == false then "none"
                  elif (.value.fixAvailable | type) == "object" then "version"
                  else "auto" end),
        fixedVersion: (if (.value.fixAvailable | type) == "object"
                       then .value.fixAvailable.version
                       else null end),
        advisories: ([ .value.via[] | select(type=="object") | .url ] | unique)
      }
  ' | while IFS= read -r rec; do
    name=$(jq -r '.name' <<<"$rec")
    range=$(jq -r '.range' <<<"$rec")
    severity=$(jq -r '.severity' <<<"$rec")
    fixKind=$(jq -r '.fixKind' <<<"$rec")
    fixedVersion=$(jq -r '.fixedVersion // empty' <<<"$rec")
    installed="$(get_installed_ver "$name")"

    case "$fixKind" in
      none)    fixStatus="no fix available" ;;
      auto)    fixStatus="fixable via 'npm audit fix'" ;;
      version) fixStatus="update to ${fixedVersion}" ;;
      *)       fixStatus="-" ;;
    esac

    echo "## ${name}"
    echo "  - installed: ${installed}"
    echo "  - vulnerable range: ${range}"
    echo "  - severity: ${severity}"
    echo "  - fix: ${fixStatus}"
    echo "  - advisories:"
    jq -r '.advisories[]? | "    • \(. )"' <<<"$rec"
    [[ $(jq -r '.advisories | length' <<<"$rec") -gt 0 ]] || echo "    • -"
    echo
  done
fi

############################################
# Outdated packages (even without advisories)
############################################
OUTDATED_JSON="$(npm outdated --json 2>/dev/null || true)"
if [[ -n "${OUTDATED_JSON}" && "${OUTDATED_JSON}" != "null" ]]; then
  echo "# Outdated Packages (non-security)"
  echo

  printf '%s\n' "${OUTDATED_JSON}" \
  | jq -r 'to_entries[] | "\(.key)\t\(.value.current)\t\(.value.wanted)\t\(.value.latest)\t\(.value.type // "-")"' \
  | while IFS=$'\t' read -r name current wanted latest type; do
      installed="$(get_installed_ver "$name")"
      [[ -n "${current}" && "${current}" != "null" ]] && installed="${current}"
      echo "## ${name}"
      echo "  - installed: ${installed:-"-"}"
      echo "  - wanted (fits your semver): ${wanted}"
      echo "  - latest (newest release): ${latest}"
      echo "  - type: ${type}"
      echo
    done
fi



echoend
