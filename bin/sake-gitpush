#!/bin/bash


SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
WORKING_DIR=$(pwd)
source $SCRIPT_DIR/sake-methods


help_and_exit() {
    echoline;
    echonice "   Available settings:";
    echoline;
    echonice "   -c, --commit-and-push          commit and push also? enter yes to execute";
    echonice "   -m, --message                  commit message";
    echonice "   -v, --new-version              create new tag? options are no|patch|minor|major";
    echonice "   -a, --also                     also do vendor - e.g. vendor/silverstripe OR vendor/sunnysideup";
    echonice "   -s, --status-only              include folders in themes";
    echonice "   -t, --themes-also              include folders in themes";
    echonice " "
    echoline;
    echonice "   Example usage:"
    echoline;
    echonice "   e.g. sake-gitpush  -m 'PATCH'   -c yes -v patch -a 'vendor/silverstripe'   -t yes  app/src ";
    echoline;
    echonice " "
    echonice " "

    exit;
}
commitAndPush="yes"
message="WIP"
dir='./'
newVersion='no'
also='nothing-here-hopefully'
alsoDoThemes='no'
statusOnly='no'
while (( $# )); do
  case $1 in
    -c|--commit-and-push)  commitAndPush=$2;shift ;;
    -m|--message)          message=$2;shift ;;
    -v|--new-version)      newVersion=$2;shift ;;
    -a|--also)             also=$2;shift ;;
    -s|--status-only)      statusOnly=$2;shift ;;
    -t|--themes-also)      alsoDoThemes=$2;shift ;;
    -*)                    printf 'Unknown option: %q\n\n' "$1";
                           help_and_exit 1 ;;
    *)                     dir=$1;;
  esac
  shift
done

newVersionLowerCase=$(echo ${newVersion} | tr '[:upper:]' '[:lower:]')

echonice " "
echonice " "
echoline;
echonice "   Running GIT PUSH";
echoline;
echonice "   directory of script:           $SCRIPT_DIR";
echonice "   directory to commit:           $WORKING_DIR/$dir";
echoline;
echonice "   Commit and Push (-c):          $commitAndPush";
echonice "   Message (-m):                  $message";
echonice "   Create New Tag (-v):           $newVersionLowercase";
echonice "   Also check (-a):               $WORKING_DIR/$also";
echonice "   Status Only (-s):              $statusOnly";
echonice "   Also include themes (-t):      $alsoDoThemes";
echoline;
echonice " "
echonice " "

echonice "   # going to right directory: $WORKING_DIR/$dir"
if [ -d "$WORKING_DIR/$dir" ]; then
    cd $WORKING_DIR/$dir
fi
GIT_DIR=$(git rev-parse --show-toplevel)


if test -f "$GIT_DIR/.git/config"; then
    # set the right way to look at branches
    git config push.default matching

    echoline;
    echonice "   # check git status"
    echoline;
    git status

    echoline;
    echonice "   # current commit"
    echoline;
    git rev-parse --short --verify HEAD

    echoline;

    if [[ "$statusOnly" == "yes" ]]; then
        exit 0
    fi

    if [[ "$commitAndPush" == "yes" ]]; then
        echoline;
        echonice "   # adding files to git repo"
        echoline;
        git add . -A
        #git add $WORKING_DIR/$also
        #git add $WORKING_DIR/$logFile
        echoline;
        echonice "   # committing files to git repo"
        echoline;
        git commit . -m "$message"
        #git commit $WORKING_DIR/$also -m "$message"
        #git commit $WORKING_DIR/$logFile -m "$message"
    fi
    echoline;
    echonice "   # pulling commits for the current branch from git repo"
    echoline;
    git pull origin $(git rev-parse --abbrev-ref HEAD) --ipv4
    git fetch --all --ipv4
    if [[ "$commitAndPush" == "yes" ]]; then
        BRANCH=$(git rev-parse --abbrev-ref HEAD)
        echoline;
        echonice "   # pushing commits to git repo, branch: $BRANCH"
        echoline;
        git push origin $(git rev-parse --abbrev-ref HEAD)  --ipv4
    fi


    if [[ "$newVersionLowerCase" == "patch" || "$newVersionLowerCase" == "minor" || "$newVersionLowerCase" == "major" ]]; then

        git fetch --all --ipv4

        git tag --column
        OLD_TAG=$(git tag | sort -V | tail -1)
        # RES=$(git show-ref --tags)
        # if [ -z "$RES" ]; then
        #     OLD_TAG=1.0.0
        # else
        #     OLD_TAG=$(git describe --tags --abbrev=0 | awk -F. '{OFS="."; $NF+=0; print $0}')
        # fi

        echoline;
        echonice "   Found old Tag";
        echoline;
        echonice "   $OLD_TAG";
        echoline;


        # Build array from version string.
        a=( ${OLD_TAG//./ } )


        # Increment version numbers as requested.
        if [ ${#a[@]} -ne 3 ]
        then
            echoline;
            echobad "   ERROR $OLD_TAG (current tag) can not be parsed!"
            echoline;
            exit 1
        fi

        if [[ "$newVersionLowerCase" == "major" ]]; then
          ((a[0]++))
          a[1]=0
          a[2]=0
        fi

        if [[ "$newVersionLowerCase" == "minor" ]]; then
          ((a[1]++))
          a[2]=0
        fi

        if [[ "$newVersionLowerCase" == "patch" ]]; then
          ((a[2]++))
        fi

        NEW_TAG="${a[0]}.${a[1]}.${a[2]}";

        echoline;
        echonice "   Found new Tag ($newVersionLowerCase)";
        echoline;
        echonice "   $NEW_TAG";
        echoline;

        git tag -a $NEW_TAG -m "auto-generated linter tag"

        git push --tags --ipv4

        git tag -v


    fi

    echonice " ";
    echonice " ";
    echoline;
    echonice "   # check git status"
    echoline;
    git status
    echoline;
    if output=$(git status --porcelain) && [ -z "$output" ]; then
        echogood " # ALL COMMITTED";
    else
        echobad " Not all Code is Committed";
    fi
    if git diff-index --quiet HEAD --; then
        echogood " # ALL PUSHED";
    else
        echobad " There are changes to push";
    fi
    echoline;

    if test -f "$WORKING_DIR/$also"; then
        $SCRIPT_DIR/sake-gitpush-vendor-packages -m "'$message'" -t no -c $commitAndPush $WORKING_DIR/$also
    fi

    if [[ "$alsoDoThemes" == "yes" ]]; then
        $SCRIPT_DIR/sake-gitpush-vendor-packages -m "'$message'" -t no -c $commitAndPush  $WORKING_DIR/themes
    fi
else
    echobad " "
    echobad " "
    echoline;
    echobad "   ===  ERROR - NOT A GIT REPO ===";
    echobad "   "$WORKING_DIR/$dir;
    echobad "   "we tried to find the git dir: $GIT_DIR but that could not be found.;
    echobad "   "But that did not work.;
    echobad "   === IS NOT A GIT REPO       ===";
    echoline;
fi

echoend;
