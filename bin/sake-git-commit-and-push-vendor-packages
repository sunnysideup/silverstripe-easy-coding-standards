#!/bin/bash

############################################ BASICS
SCRIPT_DIR="$COMPOSER_RUNTIME_BIN_DIR"
WORKING_DIR=$(pwd)
source $SCRIPT_DIR/sake-self-methods

############################################ DIR
dir=${1:-'vendor'}

############################################ SETTINGS
commitAndPush='yes'
message=''
newVersion='no'
statusOnly='no'
fullUpdate='yes'
help='no'
verbose='no'

while (($#)); do
    case $1 in
    -m | --message)
        message=$2
        shift
        ;;
    -c | --commit-and-push)
        commitAndPush=$2
        shift
        ;;
    -v | --new-version)
        newVersion=$2
        shift
        ;;
    -s | --status-only) statusOnly='yes' ;;
    -f | --full-update)
        fullUpdate=$2
        shift
        ;;
    --verbose) verbose='yes' ;;
    -h | --help) help='yes' ;;
    -*)
        printf 'Unknown option: %q\n\n' "$1"
        help='yes'
        ;;
    *) dir=$1 ;;
    esac
    shift
done

help_and_exit() {
    ECHOHEAD "Checking Vendor Packages for Changes"
    echonice "Directory of script:           $SCRIPT_DIR"
    echonice "Directory to analyse:          $WORKING_DIR/$dir"

    ECHOHEAD "Current settings:"
    echonice "Message (-m):                  $message"
    echonice "Commit and Push (-c):          $commitAndPush"
    echonice "Create New tag (-v):           $newVersion"
    echonice "Status Only (-s):              $statusOnly"
    echonice "Full Composer Update (-f):     $fullUpdate"
    echonice "Verbose (--verbose):           $verbose"

    ECHOHEAD "Available settings:"
    echonice "-m, --message                  message - e.g. MNT: Lint, defaults to last message"
    echonice "-c, --commit-and-push          commit and push also? default: yes"
    echonice "-v, --new-version              create new tag (no|patch|minor|major), default: no"
    echonice "-s, --status-only              check if there are changes git folder present, default: no"
    echonice "-f, --full-update              run a full composer update afterwards and commit, default: yes"
    echonice "--verbose                      show detailed information about each repository"
    echonice "-h, --help                     show help information"

    ECHOHEAD "Example usage:"
    echonice "sake-git-commit-and-push-vendor-packages  -m 'MNT: lint'   -c yes  -v patch -f no   vendor/my-vendor-name"

    echofunctions
    exit
}

############################################ HELP ONLY
[[ "$help" == "yes" ]] && help_and_exit

if [[ "$statusOnly" != "yes" ]]; then
    # prompt user for message
    message=$(check_commit_message "$message")
    retVal=$?

    if [[ $retVal -ne 0 ]]; then
        echobad "Invalid commit message. Exiting script."
        exit 1
    fi
fi

############################################ CODE
[[ ! -d "$WORKING_DIR" ]] && echobad "Could not change directory to $WORKING_DIR" && help_and_exit

installpackage "jq"

if [[ "$statusOnly" != "yes" ]]; then
    ECHOHEAD "Removing vendor folders that do not need to be there ..."
    find "$WORKING_DIR/$dir" -mindepth 2 -maxdepth 2 -type d -name "vendor" -exec rm -rf {} \;
    ECHOHEAD "Removing orig files"
    sake-lint-remove-origs "$dir"
fi

has_git_changes() {
    local directory="$1"

    # Check if the directory is a git repository
    if [[ ! -d "$directory/.git" ]]; then
        [[ "$verbose" == "yes" ]] && echobad "$directory is not a git repository"
        return 1
    fi

    # Check for uncommitted changes (including untracked files)
    if [[ -n "$(git -C "$directory" status --porcelain)" ]]; then
        [[ "$verbose" == "yes" ]] && echonice "$directory has uncommitted changes"
        return 0
    fi

    # Check for unpushed commits
    local current_branch=$(git -C "$directory" rev-parse --abbrev-ref HEAD)
    if [[ -n "$(git -C "$directory" log @{u}.. 2>/dev/null)" ]]; then
        [[ "$verbose" == "yes" ]] && echonice "$directory has unpushed commits"
        return 0
    fi

    # Check if tracking a remote branch but the local branch is ahead
    if git -C "$directory" rev-parse @{u} >/dev/null 2>&1; then
        local ahead=$(git -C "$directory" rev-list @{u}..HEAD --count 2>/dev/null)
        if [[ "$ahead" != "0" ]]; then
            [[ "$verbose" == "yes" ]] && echonice "$directory is ahead of remote by $ahead commits"
            return 0
        fi
    fi

    [[ "$verbose" == "yes" ]] && echonice "$directory has no changes to commit or push"
    return 1
}

process_directory() {
    local directory=$1

    if [[ ! -d "$directory" ]]; then
        [[ "$verbose" == "yes" ]] && echobad "Directory does not exist: $directory"
        return
    fi

    # Check if this is a git repository
    if [[ ! -d "$directory/.git" ]]; then
        [[ "$verbose" == "yes" ]] && echobad "$directory IS NOT A GIT REPO"
        return
    fi

    # Check for changes
    if has_git_changes "$directory"; then
        if [[ "$statusOnly" == "yes" ]]; then
            echobad "Changes detected in $directory"
            git -C "$directory" status --short
        else
            echonice "Processing changes in $directory"
            $SCRIPT_DIR/sake-git-commit-and-push "$directory" -m "$message" -c $commitAndPush -s $statusOnly -v $newVersion
        fi
    else
        [[ "$verbose" == "yes" ]] && echonice "No changes in $directory"
    fi
}

# Use both get_my_repos (if it exists) and direct directory scanning
ECHOHEAD "Looking for repositories using get_my_repos function"
if type get_my_repos >/dev/null 2>&1; then
    matchingDirs=$(get_my_repos "$WORKING_DIR")
    for repo in $matchingDirs; do
        process_directory "$repo"
    done
else
    echobad "get_my_repos function not found, falling back to directory scanning only"
fi

# Always scan vendor directories directly to ensure we don't miss any
ECHOHEAD "Scanning for git repositories in $WORKING_DIR/$dir"
find "$WORKING_DIR/$dir" -type d -name ".git" -exec dirname {} \; | while read repo; do
    process_directory "$repo"
done

# Check themes directory if it exists
if [[ -d "$WORKING_DIR/themes" ]]; then
    ECHOHEAD "Scanning for git repositories in $WORKING_DIR/themes"
    find "$WORKING_DIR/themes" -type d -name ".git" -exec dirname {} \; | while read repo; do
        process_directory "$repo"
    done
fi

# Return to the original directory
cd "$WORKING_DIR" || exit

# Perform composer update if needed
if [[ "$statusOnly" != "yes" && "$fullUpdate" == "yes" ]]; then
    ECHOHEAD "Running composer update"
    sake-composer-update
    process_directory "$WORKING_DIR"
fi

echoend
