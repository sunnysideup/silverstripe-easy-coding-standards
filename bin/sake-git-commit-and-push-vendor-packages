#!/bin/bash

############################################ BASICS
SCRIPT_DIR="$COMPOSER_RUNTIME_BIN_DIR"
WORKING_DIR=$(pwd)
source $SCRIPT_DIR/sake-self-methods

############################################ DIR
dir=${1:-'vendor'}

############################################ SETTINGS
commitAndPush='yes'
message='WIP'
newVersion='no'
statusOnly='no'
fullUpdate='yes'
help='no'

while (($#)); do
    case $1 in
    -m | --message)
        message=$2
        shift
        ;;
    -c | --commit-and-push)
        commitAndPush=$2
        shift
        ;;
    -v | --new-version)
        newVersion=$2
        shift
        ;;
    -s | --status-only)
        statusOnly=$2
        shift
        ;;
    -f | --full-update)
        fullUpdate=$2
        shift
        ;;
    -h | --help) help='yes' ;;
    -*)
        printf 'Unknown option: %q\n\n' "$1"
        help='yes'
        ;;
    *) dir=$1 ;;
    esac
    shift
done

# prompt user for message
if [[ -z "$message" ]]; then
    read -p "Commit message: " message
fi

# default message if still empty
message=${message:-"WIP"}

help_and_exit() {
    ECHOHEAD "Checking Vendor Packages for Changes"
    echonice "Directory of script:           $SCRIPT_DIR"
    echonice "Directory to analyse:          $WORKING_DIR/$dir"

    ECHOHEAD "Current settings:"
    echonice "Message (-m):                  $message"
    echonice "Commit and Push (-c):          $commitAndPush"
    echonice "Create New tag (-v):           $newVersion"
    echonice "Status Only (-s):              $statusOnly"
    echonice "Full Composer Update (-f):     $fullUpdate"

    ECHOHEAD "Available settings:"
    echonice "-m, --message                  message - e.g. Lint, default: WIP"
    echonice "-c, --commit-and-push          commit and push also? default: yes"
    echonice "-v, --new-version              create new tag (no|patch|minor|major), default: no"
    echonice "-s, --status-only              check if there are changes git folder present, default: no"
    echonice "-f, --full-update              run a full composer update afterwards and commit, default: yes"
    echonice "-h, --help                     show help information"

    ECHOHEAD "Example usage:"
    echonice "sake-git-commit-and-push-vendor-packages  -m 'PATCH: lint'   -c yes  -v patch -f no   vendor/my-vendor-name"

    echofunctions
    exit
}

############################################ HELP ONLY
[[ "$help" == "yes" ]] && help_and_exit

############################################ CODE
[[ ! -d "$WORKING_DIR" ]] && echobad "Could not change directory to $WORKING_DIR" && help_and_exit

ECHOHEAD "Removing vendor folders that do not need to be there ..."
find "$WORKING_DIR/$dir" -mindepth 2 -maxdepth 2 -type d -name "vendor" -exec rm -rf {} \;

ECHOHEAD "Removing orig files"
sake-lint-remove-origs -d yes "$dir"

process_directory() {
    local directory=$1
    ECHOHEAD "### DOING: $directory"
    cd "$directory" || return

    if [[ ! -f "$directory/.git/config" ]]; then
        echobad "$directory IS NOT A GIT REPO"
    else
        if has_git_changes; then
            if [[ "$statusOnly" == "yes" ]]; then
                git status -s
            else
                $SCRIPT_DIR/sake-git-commit-and-push . -m "$message" -c $commitAndPush -s $statusOnly -v $newVersion
            fi
        else
            echonice "No changes in $directory"
        fi
    fi
    cd - >/dev/null
}

has_git_changes() {
    if [[ -n $(git status -s) ]]; then
        return 0 # There are changes
    else
        return 1 # No changes
    fi
}

ECHOHEAD "going to look for folders in $WORKING_DIR/themes"
find "$WORKING_DIR/themes" -mindepth 1 -maxdepth 1 -type d -print0 |
    while IFS= read -r -d '' line; do
        process_directory "$line"
    done

ECHOHEAD "going to look for folders in $WORKING_DIR/$dir"
find "$WORKING_DIR/$dir" -mindepth 1 -maxdepth 1 -type d -print0 |
    while IFS= read -r -d '' line; do
        process_directory "$line"
    done

ECHOHEAD "back to the start: $WORKING_DIR"
cd "$WORKING_DIR"

[[ "$fullUpdate" == "yes" ]] && sake-composer-update && sake-git-commit-and-push . -m "$message" -c $commitAndPush -s $statusOnly -v $newVersion

echoend
