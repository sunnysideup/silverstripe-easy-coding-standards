#!/bin/bash

############################################ BASICS
SCRIPT_DIR="$COMPOSER_RUNTIME_BIN_DIR"
WORKING_DIR=$(pwd)
source $SCRIPT_DIR/sake-self-methods

############################################ DIR
dir='./'
############################################ SETTINGS
force='no'
commit='yes'
sortPackages='yes'
help='no'

while (($#)); do
    case $1 in
    -f | --force)
        force=$2
        shift
        ;;
    -c | --commit)
        commit=$2
        shift
        ;;
    -s | --sort)
        sortPackages=$2
        shift
        ;;
    -h | --help)
        help='yes'
        shift
        ;;
    -*)
        printf 'Unknown option: %q\n\n' "$1"
        help='yes'
        ;;
    *) dir=$1 ;;
    esac
    shift
done

help_and_exit() {
    ECHOHEAD "Composer Update"
    echonice "Directory of script:           $SCRIPT_DIR"
    echonice "Directory to analyse:          $WORKING_DIR/$dir"

    ECHOHEAD "Current settings:"
    echonice "Force (-f|--force):            $force"
    echonice "Commit result:                 $commit"

    ECHOHEAD "Available settings:"
    echonice "-f, --force                    delete vendor folder, default: 'no'"
    echonice "-c, --commit                   also commit, default: 'yes'"
    echonice "-s, --sort                     sort packages, default: 'yes'"
    echonice "-h, --help                     show help information"

    ECHOHEAD "Example usage:"
    echonice "sake-composer-update . -f 'yes' -c 'no'"

    echofunctions
    exit
}

############################################ HELP ONLY
if [[ "$help" == "yes" ]]; then
    help_and_exit
fi

############################################ CODE
# Ensure jq is installed
if ! command -v jq &>/dev/null; then
    echo "Error: jq is not installed. Please install jq to proceed."
    exit 1
fi

# Step: Capture the current package info before the update
oldPackageInfo=$(composer info --format=json)

# Run composer update
echonice "Running composer update..."
composer update --prefer-source

# Capture the new package info after the update
newPackageInfo=$(composer info --format=json)

# Parse both old and new package info
# Extract version and commit hash from the version field
oldPackages=$(echo "$oldPackageInfo" | jq -r '.installed[] | "\(.name) \(.version)"')
newPackages=$(echo "$newPackageInfo" | jq -r '.installed[] | "\(.name) \(.version)"')

# Initialize an empty commit message
commitMessage=""

# Function to detect added packages
detect_added_packages() {
    echo "Detecting added packages..."
    while read -r newPackage; do
        packageName=$(echo "$newPackage" | awk '{print $1}')
        if ! echo "$oldPackages" | grep -q "^$packageName "; then
            echonice "ENH: Package added: $newPackage"
            commitMessage+=$(echo -e "\n\n+++ Package added: $newPackage \n\n")
        fi
    done <<<"$newPackages"
}

# Function to detect deleted packages
detect_deleted_packages() {
    echo "Detecting deleted packages..."
    while read -r oldPackage; do
        packageName=$(echo "$oldPackage" | awk '{print $1}')
        if ! echo "$newPackages" | grep -q "^$packageName "; then
            echonice "API: Package deleted: $oldPackage"
            commitMessage+=$(echo -e "\n\n--- Package deleted: $oldPackage \n\n")
        fi
    done <<<"$oldPackages"
}

# Detect added and deleted packages
detect_added_packages
detect_deleted_packages

# Compare the packages and identify version/reference changes
while read -r oldPackage; do
    packageName=$(echo "$oldPackage" | awk '{print $1}')
    oldVersion=$(echo "$oldPackage" | awk '{print $2}')
    oldRef=$(echo "$oldPackage" | awk '{print $3}')

    newPackage=$(echo "$newPackages" | grep "^$packageName ")
    newVersion=$(echo "$newPackage" | awk '{print $2}')
    newRef=$(echo "$newPackage" | awk '{print $3}')

    if [[ "$oldVersion" != "$newVersion" || "$oldRef" != "$newRef" ]]; then
        oldRef=${oldRef:-$oldVersion}
        newRef=${newRef:-$newVersion}
        echonice "Package $packageName updated from $oldVersion ($oldRef) to $newVersion ($newRef)"
        commitMessage+=$(echo -e "\n\n==== $packageName changed from $oldRef to $newRef: \n\n")
        # Fetch the commits between the two references
        packagePath="vendor/$packageName"
        if [ -d "$packagePath" ]; then
            cd "$packagePath" || continue
            if [ -d .git ]; then
                git fetch --tags &>/dev/null
                commits=$(git log --pretty=format:'%B%n' "$oldRef".."$newRef")
                if [ -n "$commits" ]; then
                    commitMessage+=$(echo -e "\n\n$commits \n\n")
                else
                    commitMessage+=$(echo -e "\n\nNo new commits between $oldRef and $newRef. \n\n")
                fi
            else
                commitMessage+=$(echo -e "\n\nNo git repository found in $packagePath. \n\n")
            fi
            cd - >/dev/null
        else
            commitMessage+=$(echo -e "\n\n$packageName: Vendor directory not found. \n\n")
        fi
    fi
done <<<"$oldPackages"

# Print the final commit message or fallback message
if [[ -z "$commitMessage" ]]; then
    echonice "No meaningful vendor package changes detected."
else
    echonice "Committing changes to composer.json and composer.lock..."
    echo -e "$commitMessage"

    # Stage composer.json and composer.lock
    git add composer.json composer.lock

    # Use a here-document to handle multi-line commit messages correctly
    git commit -F - <<EOF
DEP: composer update:

$commitMessage
EOF

    git push
fi

echoend
