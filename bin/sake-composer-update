#!/bin/bash

############################################ CODE
# Ensure jq is installed
if ! command -v jq &>/dev/null; then
    echo "Error: jq is not installed. Please install jq to proceed."
    exit 1
fi

# Step: Capture the current package info before the update
oldPackageInfo=$(composer info --format=json)

# Run composer update
echonice "Running composer update..."
composer update --prefer-source

# Capture the new package info after the update
newPackageInfo=$(composer info --format=json)

# Parse both old and new package info
# Extract version and commit hash from the version field
oldPackages=$(echo "$oldPackageInfo" | jq -r '.installed[] | "\(.name) \(.version)"')
newPackages=$(echo "$newPackageInfo" | jq -r '.installed[] | "\(.name) \(.version)"')

# Initialize an empty commit message
commitMessage=""

# Function to detect added packages
detect_added_packages() {
    echo "Detecting added packages..."
    while read -r newPackage; do
        packageName=$(echo "$newPackage" | awk '{print $1}')
        if ! echo "$oldPackages" | grep -q "^$packageName "; then
            echonice "Package added: $newPackage"
            commitMessage+="Package added: $newPackage\n"
        fi
    done <<<"$newPackages"
}

# Function to detect deleted packages
detect_deleted_packages() {
    echo "Detecting deleted packages..."
    while read -r oldPackage; do
        packageName=$(echo "$oldPackage" | awk '{print $1}')
        if ! echo "$newPackages" | grep -q "^$packageName "; then
            echonice "Package deleted: $oldPackage"
            commitMessage+="Package deleted: $oldPackage\n"
        fi
    done <<<"$oldPackages"
}

# Detect added and deleted packages
detect_added_packages
detect_deleted_packages

# Compare the packages and identify version changes
while read -r oldPackage; do
    packageName=$(echo "$oldPackage" | awk '{print $1}')
    oldVersion=$(echo "$oldPackage" | awk '{print $2, $3}') # Handle the version and commit hash
    newPackage=$(echo "$newPackages" | grep "^$packageName ")
    newVersion=$(echo "$newPackage" | awk '{print $2, $3}') # Handle the version and commit hash

    if [[ "$oldVersion" != "$newVersion" ]]; then
        echonice "Package $packageName updated from $oldVersion to $newVersion"

        # No commit references available, just log the version changes
        commitMessage+="$packageName: Updated from $oldVersion to $newVersion\n"
    fi
done <<<"$oldPackages"

# Print the final commit message or fallback message
if [[ -z "$commitMessage" ]]; then
    echonice "No meaningful vendor package changes detected."
else
    echonice "Committing changes to composer.json and composer.lock..."
    echo -e "$commitMessage"

    # Stage composer.json and composer.lock
    git add composer.json composer.lock

    # Use a here-document to handle multi-line commit messages correctly
    git commit -F - <<EOF
DEP: composer update:

$commitMessage
EOF

    git push
fi

echoend
