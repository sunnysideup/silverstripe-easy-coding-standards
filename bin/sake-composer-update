#!/bin/bash

############################################ BASICS
SCRIPT_DIR="$COMPOSER_RUNTIME_BIN_DIR"
WORKING_DIR=$(pwd)
source $SCRIPT_DIR/sake-self-methods

############################################ DIR
dir='./'
############################################ SETTINGS
force='no'
commit='yes'
sortPackages='yes'
help='no'

while (($#)); do
    case $1 in
    -f | --force)
        force=$2
        shift
        ;;
    -c | --commit)
        commit=$2
        shift
        ;;
    -s | --sort)
        sortPackages=$2
        shift
        ;;
    -h | --help)
        help='yes'
        shift
        ;;
    -*)
        printf 'Unknown option: %q\n\n' "$1"
        help='yes'
        ;;
    *) dir=$1 ;;
    esac
    shift
done

help_and_exit() {
    ECHOHEAD "Composer Update"
    echonice "Directory of script:           $SCRIPT_DIR"
    echonice "Directory to analyse:          $WORKING_DIR/$dir"

    ECHOHEAD "Current settings:"
    echonice "Force (-f|--force):            $force"
    echonice "Commit result:                 $commit"

    ECHOHEAD "Available settings:"
    echonice "-f, --force                    delete vendor folder, default: 'no'"
    echonice "-c, --commit                   also commit, default: 'yes'"
    echonice "-s, --sort                     sort packages, default: 'yes'"
    echonice "-h, --help                     show help information"

    ECHOHEAD "Example usage:"
    echonice "sake-composer-update . -f 'yes' -c 'no'"

    echofunctions
    exit
}

############################################ HELP ONLY
if [[ "$help" == "yes" ]]; then
    help_and_exit
fi

############################################ CODE
check_for_env_var "GITHUB_MATCH_URL_FOR_VENDOR_PACKAGES"

if [ -d "$WORKING_DIR/$dir" ]; then
    cd $WORKING_DIR/$dir
else
    echonice "Could not change directory to $WORKING_DIR/$dir"
    help_and_exit
fi

if [[ "$force" == "yes" ]]; then
    echonice "Clearning vendor folder"
    rm vendor -rf
fi

if [[ "$sortPackages" == "yes" ]]; then
    echonice "Sorting packages"
    composer config sort-packages true
fi

# Step: Check each vendor package for uncommitted changes
check_vendor_changes() {
    echonice "Checking for local changes in vendor packages..."

    for package_dir in vendor/*/*; do
        if [ -d "$package_dir/.git" ]; then
            cd "$package_dir" || continue

            # Check if there are uncommitted changes
            if [[ -n $(git status --porcelain) ]]; then
                echobad "Uncommitted changes detected in $package_dir!"
                echonice "Please commit or stash your changes before updating."
                cd - >/dev/null
                exit 1
            fi

            cd - >/dev/null
        fi
    done

    echonice "No uncommitted changes found in vendor packages."
}

# Run the function before updating
check_vendor_changes

# Proceed with the Composer update
echonice "Running Composer update..."
composer update --no-interaction --no-progress --prefer-source >composer.log

# Step 2: Initialize the commit message variable
commitMessage=""

# Step 3: Extract updated packages and store in a temporary file
grep -E 'Updating|Downgrading' composer.log >composer_changes.log

# Process the log file outside the subshell
while read -r line; do
    # Extract package name, old version, and new version reliably
    package=$(echo "$line" | awk '{print $2}')
    old_version=$(echo "$line" | awk '{print $3}' | tr -d '()')
    new_version=$(echo "$line" | awk '{print $5}' | tr -d '()')

    # Debug message to verify parsing
    echonice "Processing $package: $old_version -> $new_version"

    # Navigate to the package directory
    package_path="vendor/$package"

    if [ -d "$package_path" ]; then
        cd "$package_path" || exit

        # Get the Git commit hashes for the old and new versions
        old_commit=$(git rev-list -n 1 "$old_version" 2>/dev/null)
        new_commit=$(git rev-list -n 1 "$new_version" 2>/dev/null)

        if [ -n "$old_commit" ] && [ -n "$new_commit" ]; then
            # Capture all commit messages between the two versions
            packageCommits=$(git log --pretty=format:'%h - %s' "$old_commit".."$new_commit")
            commitMessage+="$package (from $old_version to $new_version):\n$packageCommits\n\n"
        else
            commitMessage+="$package: Unable to find commits between $old_version and $new_version.\n\n"
        fi

        cd - >/dev/null # Return to the original directory
    else
        commitMessage+="$package: Not found in vendor directory.\n\n"
    fi
done <composer_changes.log

# Display the final commit message for debugging (optional)
echonice "$commitMessage"

# Proceed with the commit if requested
if [[ "$commit" == "yes" ]]; then
    sake-git-commit-and-push . -m "$(echo -e "DEP: composer update:\n\n$commitMessage")"
fi

echoend
