#!/bin/bash

############################################ BASICS
SCRIPT_DIR="$COMPOSER_RUNTIME_BIN_DIR"
WORKING_DIR=$(pwd)
source $SCRIPT_DIR/sake-self-methods

############################################ DIR
dir='./'
############################################ SETTINGS
force='no'
commit='yes'
sortPackages='yes'
help='no'

while (($#)); do
    case $1 in
    -f | --force)
        force=$2
        shift
        ;;
    -c | --commit)
        commit=$2
        shift
        ;;
    -s | --sort)
        sortPackages=$2
        shift
        ;;
    -h | --help)
        help='yes'
        shift
        ;;
    -*)
        printf 'Unknown option: %q\n\n' "$1"
        help='yes'
        ;;
    *) dir=$1 ;;
    esac
    shift
done

help_and_exit() {
    ECHOHEAD "Composer Update"
    echonice "Directory of script:           $SCRIPT_DIR"
    echonice "Directory to analyse:          $WORKING_DIR/$dir"

    ECHOHEAD "Current settings:"
    echonice "Force (-f|--force):            $force"
    echonice "Commit result:                 $commit"

    ECHOHEAD "Available settings:"
    echonice "-f, --force                    delete vendor folder, default: 'no'"
    echonice "-c, --commit                   also commit, default: 'yes'"
    echonice "-s, --sort                     sort packages, default: 'yes'"
    echonice "-h, --help                     show help information"

    ECHOHEAD "Example usage:"
    echonice "sake-composer-update . -f 'yes' -c 'no'"

    echofunctions
    exit
}

############################################ HELP ONLY
if [[ "$help" == "yes" ]]; then
    help_and_exit
fi

############################################ CODE
check_for_env_var "GITHUB_MATCH_URL_FOR_VENDOR_PACKAGES"

if [ -d "$WORKING_DIR/$dir" ]; then
    cd $WORKING_DIR/$dir
else
    echonice "Could not change directory to $WORKING_DIR/$dir"
    help_and_exit
fi

if [[ "$force" == "yes" ]]; then
    echonice "Clearning vendor folder"
    rm vendor -rf
fi

if [[ "$sortPackages" == "yes" ]]; then
    echonice "Sorting packages"
    composer config sort-packages true
fi

# Step: Check each vendor package for uncommitted changes
check_vendor_changes() {
    echonice "Checking for local changes in vendor packages..."

    for package_dir in vendor/*/*; do
        if [ -d "$package_dir/.git" ]; then
            cd "$package_dir" || continue

            # Check if there are uncommitted changes
            if [[ -n $(git status --porcelain) ]]; then
                echobad "Uncommitted changes detected in $package_dir!"
                echonice "Please commit or stash your changes before updating."
                cd - >/dev/null
                exit 1
            fi

            cd - >/dev/null
        fi
    done

    echonice "No uncommitted changes found in vendor packages."
}

# Run composer update
echonice "Running composer update..."
composer update --prefer-source

# Initialize an empty commit message
commitMessage=""

# Check if composer.lock has changed
if git diff --quiet composer.lock; then
    echonice "No vendor package changes detected."
else
    echonice "Parsing composer.lock changes..."

    # DEBUG: Show the raw diff output
    echo "DEBUG: Raw git diff output:"
    git diff composer.lock

    # Extract package names and their references from the composer.lock diff
    changes=$(git diff composer.lock | awk '
        BEGIN { pkg_name = ""; old_ref = ""; new_ref = "" }
        /"name":/ { gsub(/"|,/, "", $2); pkg_name = $2 }
        /"reference":/ {
            gsub(/"|,/, "", $2);
            if (NR % 2 == 1) old_ref = $2;
            else {
                new_ref = $2;
                print pkg_name, old_ref, new_ref;
            }
        }
    ')

    # DEBUG: Show extracted changes
    echo "DEBUG: Extracted package names and references:"
    echo "$changes"

    # Loop through the changes and gather commit messages
    while IFS=' ' read -r package oldRef newRef; do
        echo "DEBUG: Processing package: $package, Old Ref: $oldRef, New Ref: $newRef"

        # Verify that both references are valid
        if [ -n "$oldRef" ] && [ -n "$newRef" ]; then
            packagePath="vendor/$package"

            if [ -d "$packagePath" ]; then
                cd "$packagePath" || continue

                # Fetch commits between the two references
                git fetch --tags &>/dev/null
                commits=$(git log --pretty=format:'%h - %s' "$oldRef".."$newRef")

                if [ -n "$commits" ]; then
                    commitMessage+="$package (from $oldRef to $newRef):\n$commits\n\n"
                else
                    commitMessage+="$package: No new commits between $oldRef and $newRef.\n\n"
                fi

                cd - >/dev/null
            else
                commitMessage+="$package: Vendor directory not found.\n\n"
            fi
        fi
    done <<<"$changes"

    # Print the final commit message or fallback message
    if [[ -z "$commitMessage" ]]; then
        echonice "No meaningful vendor package changes detected."
    else
        echonice "Committing changes to composer.json and composer.lock..."
        echo -e "$commitMessage"

        # Stage composer.json and composer.lock
        git add composer.json composer.lock

        # Commit the changes with the generated message
        git commit -m "DEP: composer update:\n\n$commitMessage"
        git push
    fi
fi
echoend
