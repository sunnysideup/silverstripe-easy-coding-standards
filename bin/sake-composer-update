#!/bin/bash

############################################ BASICS
SCRIPT_DIR="$COMPOSER_RUNTIME_BIN_DIR"
WORKING_DIR=$(pwd)
source $SCRIPT_DIR/sake-self-methods

############################################ DIR
dir='./'
############################################ SETTINGS
force='no'
commit='yes'
sortPackages='yes'
help='no'

while (($#)); do
    case $1 in
    -f | --force)
        force=$2
        shift
        ;;
    -c | --commit)
        commit=$2
        shift
        ;;
    -s | --sort)
        sortPackages=$2
        shift
        ;;
    -h | --help)
        help='yes'
        shift
        ;;
    -*)
        printf 'Unknown option: %q\n\n' "$1"
        help='yes'
        ;;
    *) dir=$1 ;;
    esac
    shift
done

help_and_exit() {
    ECHOHEAD "Composer Update"
    echonice "Directory of script:           $SCRIPT_DIR"
    echonice "Directory to analyse:          $WORKING_DIR/$dir"

    ECHOHEAD "Current settings:"
    echonice "Force (-f|--force):            $force"
    echonice "Commit result:                 $commit"

    ECHOHEAD "Available settings:"
    echonice "-f, --force                    delete vendor folder, default: 'no'"
    echonice "-c, --commit                   also commit, default: 'yes'"
    echonice "-s, --sort                     sort packages, default: 'yes'"
    echonice "-h, --help                     show help information"

    ECHOHEAD "Example usage:"
    echonice "sake-composer-update . -f 'yes' -c 'no'"

    echofunctions
    exit
}

############################################ HELP ONLY
if [[ "$help" == "yes" ]]; then
    help_and_exit
fi

############################################ CODE
check_for_env_var "GITHUB_MATCH_URL_FOR_VENDOR_PACKAGES"

if [ -d "$WORKING_DIR/$dir" ]; then
    cd $WORKING_DIR/$dir
else
    echonice "Could not change directory to $WORKING_DIR/$dir"
    help_and_exit
fi

if [[ "$force" == "yes" ]]; then
    echonice "Clearning vendor folder"
    rm vendor -rf
fi

if [[ "$sortPackages" == "yes" ]]; then
    echonice "Sorting packages"
    composer config sort-packages true
fi

# Step: Check each vendor package for uncommitted changes
check_vendor_changes() {
    echonice "Checking for local changes in vendor packages..."

    for package_dir in vendor/*/*; do
        if [ -d "$package_dir/.git" ]; then
            cd "$package_dir" || continue

            # Check if there are uncommitted changes
            if [[ -n $(git status --porcelain) ]]; then
                echobad "Uncommitted changes detected in $package_dir!"
                echonice "Please commit or stash your changes before updating."
                cd - >/dev/null
                exit 1
            fi

            cd - >/dev/null
        fi
    done

    echonice "No uncommitted changes found in vendor packages."
}

# Run the function before updating
check_vendor_changes

# Proceed with the Composer update
echonice "Running Composer update..."
composer update --prefer-source

# Initialize an empty commit message
commitMessage=""

# Check if composer.lock has changed
if git diff --quiet composer.lock; then
    echonice "No vendor package changes detected."
else
    echonice "Parsing composer.lock changes..."

    # Extract package changes from the composer.lock diff
    changes=$(git diff --unified=0 composer.lock | grep '^[-+][^+-]' | sed 's/^+ //g')

    # Loop through each package change to gather commit messages
    while IFS= read -r line; do
        # Extract package name and version changes
        if [[ "$line" =~ \"name\":\ \"([^\"]+)\" ]]; then
            package="${BASH_REMATCH[1]}"
        elif [[ "$line" =~ \"version\":\ \"([a-f0-9]+)\" ]]; then
            version="${BASH_REMATCH[1]}"
        fi

        # If both package and version are available, gather commit messages
        if [ -n "$package" ] && [ -n "$version" ]; then
            echonice "Processing $package version $version..."

            # Go to the vendor package directory if it exists
            packagePath="vendor/$package"
            if [ -d "$packagePath" ]; then
                cd "$packagePath" || continue

                # Fetch tags and commits to ensure we have the latest history
                git fetch --tags &>/dev/null

                # Extract commit hashes for the current and previous versions
                previousCommit=$(git rev-list -n 1 HEAD^1 2>/dev/null)
                currentCommit=$(git rev-list -n 1 HEAD 2>/dev/null)

                # Gather commit messages between the two commits
                if [ -n "$previousCommit" ] && [ -n "$currentCommit" ]; then
                    commits=$(git log --pretty=format:'%h - %s' "$previousCommit".."$currentCommit")
                    commitMessage+="$package (from $previousCommit to $currentCommit):\n$commits\n\n"
                else
                    commitMessage+="$package: Unable to find commits for the current or previous version.\n\n"
                fi

                # Go back to the working directory
                cd - >/dev/null
            else
                commitMessage+="$package: Vendor directory not found.\n\n"
            fi

            # Reset package and version variables for the next loop
            package=""
            version=""
        fi
    done <<<"$changes"

    # Print the final commit message or fallback message
    if [[ -z "$commitMessage" ]]; then
        echonice "No meaningful vendor package changes detected."
    else
        echonice "Committing changes to composer.json and composer.lock..."
        echo -e "$commitMessage"

        # Stage composer.json and composer.lock
        git add composer.json composer.lock

        # Commit the changes with the generated message
        git commit -m "DEP: composer update:\n\n$commitMessage"
        git push
    fi
fi

echoend
