#!/bin/bash

############################################ BASICS
SCRIPT_DIR="$COMPOSER_RUNTIME_BIN_DIR"
WORKING_DIR=$(pwd)
source $SCRIPT_DIR/sake-self-methods

############################################ DIR
dir='./'
############################################ SETTINGS
force='no'
commit='yes'
sortPackages='yes'
help='no'

while (($#)); do
    case $1 in
    -f | --force)
        force=$2
        shift
        ;;
    -c | --commit)
        commit=$2
        shift
        ;;
    -s | --sort)
        sortPackages=$2
        shift
        ;;
    -h | --help)
        help='yes'
        shift
        ;;
    -*)
        printf 'Unknown option: %q\n\n' "$1"
        help='yes'
        ;;
    *) dir=$1 ;;
    esac
    shift
done

help_and_exit() {
    ECHOHEAD "Composer Update"
    echonice "Directory of script:           $SCRIPT_DIR"
    echonice "Directory to analyse:          $WORKING_DIR/$dir"

    ECHOHEAD "Current settings:"
    echonice "Force (-f|--force):            $force"
    echonice "Commit result:                 $commit"

    ECHOHEAD "Available settings:"
    echonice "-f, --force                    delete vendor folder, default: 'no'"
    echonice "-c, --commit                   also commit, default: 'yes'"
    echonice "-s, --sort                     sort packages, default: 'yes'"
    echonice "-h, --help                     show help information"

    ECHOHEAD "Example usage:"
    echonice "sake-composer-update . -f 'yes' -c 'no'"

    echofunctions
    exit
}

############################################ HELP ONLY
if [[ "$help" == "yes" ]]; then
    help_and_exit
fi

############################################ CODE
# Ensure jq is installed
if ! command -v jq &>/dev/null; then
    echo "Error: jq is not installed. Please install jq to proceed."
    exit 1
fi

check_for_env_var "GITHUB_MATCH_URL_FOR_VENDOR_PACKAGES"

if [ -d "$WORKING_DIR/$dir" ]; then
    cd $WORKING_DIR/$dir
else
    echonice "Could not change directory to $WORKING_DIR/$dir"
    help_and_exit
fi

if [[ "$force" == "yes" ]]; then
    echonice "Clearning vendor folder"
    rm vendor -rf
fi

if [[ "$sortPackages" == "yes" ]]; then
    echonice "Sorting packages"
    composer config sort-packages true
fi

# Step: Check each vendor package for uncommitted changes
check_vendor_changes() {
    echonice "Checking for local changes in vendor packages..."

    for package_dir in vendor/*/*; do
        if [ -d "$package_dir/.git" ]; then
            cd "$package_dir" || continue

            # Check if there are uncommitted changes
            if [[ -n $(git status --porcelain) ]]; then
                echobad "Uncommitted changes detected in $package_dir!"
                echonice "Please commit or stash your changes before updating."
                cd - >/dev/null
                exit 1
            fi

            cd - >/dev/null
        fi
    done

    echonice "No uncommitted changes found in vendor packages."
}

# Run composer update
echonice "Running composer update..."
composer update --prefer-source

# Initialize an empty commit message
commitMessage=""

# Check if composer.lock has changed
if git diff --quiet composer.lock; then
    echonice "No vendor package changes detected."
else
    echonice "Parsing composer.lock changes..."

    # Extract changes by package and reference using jq
    package_refs=$(jq -r '
        (.packages + .["packages-dev"])[] |
        {name: .name, reference: .source.reference} |
        "\(.name) \(.reference)"
    ' composer.lock)

    # DEBUG: Show extracted package references
    echo "DEBUG: Extracted package references:"
    echo "$package_refs"

    # Convert package references into an associative array (package => reference)
    declare -A refMap
    while IFS=' ' read -r package reference; do
        refMap["$package"]="$reference"
    done <<<"$package_refs"

    # Loop through the git diff and extract reference pairs per package
    currentPackage=""
    oldRef=""
    newRef=""

    git diff composer.lock | grep -E '^\(-\|+\)\s*"reference":' | while read -r line; do
        reference=$(echo "$line" | sed -E 's/^[-+]\s*"reference": "(.*)",?/\1/')

        if [[ "$line" == -* ]]; then
            oldRef="$reference"
        elif [[ "$line" == +* ]]; then
            newRef="$reference"
        fi

        # If both old and new references are available, process them
        if [[ -n "$oldRef" && -n "$newRef" ]]; then
            # Find the matching package for this reference change
            for package in "${!refMap[@]}"; do
                if [[ "${refMap[$package]}" == "$newRef" ]]; then
                    currentPackage="$package"
                    break
                fi
            done

            echo "DEBUG: Processing package: $currentPackage (old=$oldRef, new=$newRef)"

            # Check if the package directory exists
            packagePath="vendor/$currentPackage"
            if [ -d "$packagePath" ]; then
                cd "$packagePath" || continue

                # Fetch commits between the two references
                git fetch --tags &>/dev/null
                commits=$(git log --pretty=format:'%s' "$oldRef".."$newRef")

                if [ -n "$commits" ]; then
                    commitMessage+="$currentPackage: \n$commits\n\n"
                else
                    commitMessage+="$currentPackage: No new commits between $oldRef and $newRef.\n\n"
                fi

                cd - >/dev/null
            else
                commitMessage+="$currentPackage: Vendor directory not found.\n\n"
            fi

            # Reset old and new references for the next iteration
            oldRef=""
            newRef=""
        fi
    done

    # Print the final commit message or fallback message
    if [[ -z "$commitMessage" ]]; then
        echonice "No meaningful vendor package changes detected."
    else
        echonice "Committing changes to composer.json and composer.lock..."
        echo -e "$commitMessage"

        # Stage composer.json and composer.lock
        git add composer.json composer.lock

        # Use a here-document to handle multi-line commit messages correctly
        git commit -F - <<EOF
DEP: composer update:

$commitMessage
EOF

        git push
    fi
fi
echoend
